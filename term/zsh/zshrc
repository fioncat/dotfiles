autoload -Uz compinit promptinit
compinit
promptinit

zstyle ':completion:*' menu select
zstyle ':completion:*' list-colors "$LS_COLORS"
zstyle ':completion:*:*:kill:*:processes' list-colors "=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01"
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"
zstyle ':completion:*' special-dirs true
zstyle ':completion:*:cd:*' tag-order local-directories directory-stack path-directories

os_name=$(uname -s)
case $os_name in
	Linux)
		syntax_highlighting_path="/usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
		autosuggestions_path="/usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
		;;
	Darwin)
		brew_path=$(brew --prefix)
		syntax_highlighting_path="$brew_path/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
		autosuggestions_path="$brew_path/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
		;;
	*)
		echo "WARNING: Unsupported OS '$os_name'"
		;;
esac

if [[ -f $syntax_highlighting_path ]]; then
	source $syntax_highlighting_path
else
	echo "WATNING: zsh-syntax-highlighting not found"
fi

if [[ -f $autosuggestions_path ]]; then
	source $autosuggestions_path
	bindkey '^E' end-of-line
else
	echo "WATNING: zsh-autosuggestions not found"
fi

zsh_stats () {
	fc -l 1 | awk '{ CMD[$2]++; count++; } END { for (a in CMD) print CMD[a] " " CMD[a]*100/count "% " a }' | grep -v "./" | sort -nr | head -n 20 | column -c3 -s " " -t | nl
}

if [ -f $HOME/.secrets ]; then
	source $HOME/.secrets
fi

if command -v nvim &> /dev/null; then
	alias vim='nvim'
	alias vi='nvim'
fi

if command -v starship &> /dev/null; then
	eval "$(starship init zsh)"
fi

if command -v fzf &> /dev/null; then
	source <(fzf --zsh)
fi

if command -v roxide &> /dev/null; then
	source <(roxide init zsh)
	alias zz="rox home"
fi

if command -v kser &> /dev/null; then
	source <(kser init zsh)
fi

if command -v duf &> /dev/null; then
	alias df="duf"
fi

if command -v eza &> /dev/null; then
	alias ls="eza"
fi

if command -v dust &> /dev/null; then
	alias du="dust -b"
fi

if command -v kubectl &> /dev/null; then
	alias k="kubectl"
	source <(kubectl completion zsh)
fi

alias gs="git status"
alias gl="git pull"
alias gp="git push"
alias gpf="git push -f origin"
alias gps="git push --set-upstream origin"
alias gck="git checkout"
alias gr="git restore"
alias gm="git merge"
alias gcb="git checkout -b"
alias gd="git diff"
alias ga="git add"
alias gc="git commit"

alias cg="cargo"

if [[ $os_name == "Linux" ]] && [[ $USER != "root" ]]; then
	alias docker="sudo docker"
fi
